<div id="content"></div>
<div style="width:75%;">
  <canvas id="canvas"></canvas>
</div>

<script type="text/babel">

class ChartComponent extends React.Component {
  constructor(props) {
    super(props)
  }

  componentDidMount() {
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var randomScalingFactor = function() {
        return Math.round(Math.random() * 100 * (Math.random() > 0.5 ? -1 : 1));
    };
    var randomColorFactor = function() {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function(opacity) {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',' + (opacity || '.3') + ')';
    };
    var data = {
    labels: ["January", "February", "March", "April", "May", "June", "July"],
    datasets: [
        {
            label: "My First dataset",
            fill: false,
            lineTension: 0.1,
            backgroundColor: "rgba(75,192,192,0.4)",
            borderColor: "rgba(75,192,192,1)",
            borderCapStyle: 'butt',
            borderDash: [],
            borderDashOffset: 0.0,
            borderJoinStyle: 'miter',
            pointBorderColor: "rgba(75,192,192,1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(75,192,192,1)",
            pointHoverBorderColor: "rgba(220,220,220,1)",
            pointHoverBorderWidth: 2,
            pointRadius: 1,
            pointHitRadius: 10,
            data: [65, 59, 80, 81, 56, 55, 40, 100],
            spanGaps: false,
        }
    ]
};
    var config = {
        type: 'line',
        data: data,
        options: {
          scales: {
              xAxes: [{
                  display: true
              }]
            }
        }
    };
    $.each(config.data.datasets, function(i, dataset) {
        var background = randomColor(0.5);
        dataset.borderColor = background;
        dataset.backgroundColor = background;
        dataset.pointBorderColor = background;
        dataset.pointBackgroundColor = background;
        dataset.pointBorderWidth = 1;
    });
    window.onload = function() {
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myLine = new Chart(ctx, config);
    };
  }

  render() {
    return (
      <div>
        <p>Coucou</p>
      </div>
    );
  }
}

class WashingComponent extends React.Component {

  constructor(props) {
    super(props)
    this.state = {
      numberUsers: 'LOADING...',
      washingMachineInfo: 'LOADING...',
      loading: true
    }
  }

  componentDidMount() {
    var that = this;
    firebase.database().ref('washing/numberUsers').on('value', function(snapshot) {
      that.setState({numberUsers: snapshot.val()});
    });
    $.ajax({
      url: '/washINSA/json',
      type: 'GET',
      data: '',
      dataType: 'json',
      cache: false,
      processData: false,
      contentType: false,
      success: function(data) {
        that.setState({washingMachineInfo: data['json']});
        that.setState({loading: false});
      }.bind(this),
      error: function(xhr, status, err) {
        alert("Error ajax get washing intormation: "+err);
      }.bind(this)
    });
  }

  render() {
    if (!this.state.loading) {
      var machines = this.state.washingMachineInfo;
      var washingMachine = this.state.washingMachineInfo.map(function(machine) {
            return (
              <tr key={machine.machine}>
                <td>{machine.machine}</td>
                <td>{machine.available}</td>
                <td>{machine.start}</td>
                <td>{machine.end}</td>
                <td>{machine.remainingTime}</td>
                <td>{machine.type}</td>
              </tr>
            );
          });
    } else {
      var washingMachine = "Loading...";
    }

    return (
      <div className="container">
      <p>Number of users: {this.state.numberUsers}</p>

      <table className="table">
      <thead>
      <tr>
      <th>Machine</th>
      <th>Available</th>
      <th>Start</th>
      <th>End</th>
      <th>RemainingTime</th>
      <th>Type</th>
      </tr>
      </thead>
      <tbody>
      {washingMachine}
      </tbody>
      </table>
      </div>
    );
  }
}


ReactDOM.render(
  <WashingComponent/>,
  document.getElementById('content')
);
</script>

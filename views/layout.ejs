<!DOCTYPE html>
<html>
<head>
  <title><%=typeof title == 'undefined' ? 'Amicale Manager' : title%></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
  Stylesheets and Preprocessors
  ==============================

  You can always bring in CSS files manually with `<link>` tags, or asynchronously
  using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
  of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, stylesheets from your `assets/styles` folder are included
  here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
  are supported. In production, your styles will be minified and concatenated into
  a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

  + Change the order of your CSS files
  + Import stylesheets from other directories
  + Use a different or additional preprocessor, like SASS, SCSS or Stylus
-->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react-dom.js"></script> -->
<script src="https://fb.me/react-0.14.7.min.js"></script>
<script src="https://fb.me/react-dom-0.14.7.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.6.15/browser.js"></script>
<script src="https://cdn.firebase.com/libs/reactfire/0.6.0/reactfire.min.js"></script>
<script src="https://cdn.firebase.com/js/client/2.4.2/firebase.js"></script>

</script>
<!--STYLES-->
<link rel="stylesheet" href="/styles/importer.css">
<!--STYLES END-->
</head>

<body>

  <nav class="navbar navbar-default navbar-static-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/">Home</a>
      </div>
      <div id="navbar" class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <li><a href="/post">See notifications</a></li>
          <li><a href="/post/new">New notification</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="/logout">LogOut</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <%- body %>



  <!--
  Client-side Templates
  ========================

  HTML templates are important prerequisites of modern, rich client applications.
  To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
  that you load these templates client-side.

  By default, your Gruntfile is configured to automatically load and precompile
  client-side JST templates in your `assets/templates` folder, then
  include them here automatically (between TEMPLATES and TEMPLATES END).

  To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

  + Import templates from other directories
  + Use a different template engine (handlebars, jade, dust, etc.)
  + Internationalize your client-side templates using a server-side
  stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

Client-side Javascript
========================

You can always bring in JS files manually with `script` tags, or asynchronously
on the client using a solution like AMD (RequireJS).  Or, if you like, you can
take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

By default, files in your `assets/js` folder are included here
automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
CoffeeScript (.coffee) are supported. In production, your scripts will be minified
and concatenated into a single file.

To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
For example, here are a few things you could do:

+ Change the order of your scripts
+ Import scripts from other directories
+ Use a different preprocessor, like TypeScript

-->
<!--SCRIPTS-->
<script src="/js/dependencies/sails.io.js"></script>
<!--SCRIPTS END-->
</body>
</html>
